import passport from "passport";
import { Strategy as GoogleStrategy } from "passport-google-oauth20";
import { Strategy as GitHubStrategy } from "passport-github2";
import session from "express-session";
import connectPg from "connect-pg-simple";
import { Express } from "express";
import { pool } from "./db";

const PostgresSessionStore = connectPg(session);

function getCallbackUrl(provider: string) {
  const baseUrl = process.env.REPL_ID
    ? `https://${process.env.REPL_ID}-00-260iqc51qwukq.worf.replit.dev`
    : "https://workspace.alexrichardhaye.repl.co";
  return `${baseUrl}/api/auth/${provider}/callback`;
}

export function setupAuth(app: Express) {
  const sessionSettings: session.SessionOptions = {
    secret: process.env.SESSION_SECRET || "fallback-secret",
    resave: false,
    saveUninitialized: false,
    proxy: true,
    cookie: {
      secure: process.env.NODE_ENV === "production",
      maxAge: 24 * 60 * 60 * 1000,
      sameSite: "lax",
      httpOnly: true,
    },
    store: new PostgresSessionStore({
      pool,
      createTableIfMissing: true,
      tableName: "session",
      errorLog: console.error,
    }),
    name: "tour-tracker.sid",
  };

  app.use(session(sessionSettings));
  app.use(passport.initialize());
  app.use(passport.session());

  // Google Strategy
  passport.use(
    new GoogleStrategy(
      {
        clientID: process.env.GOOGLE_CLIENT_ID!,
        clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
        callbackURL: getCallbackUrl("google"),
        proxy: true,
      },
      async (accessToken, refreshToken, profile, done) => {
        console.log("Google auth attempt:", profile.id);
        // User creation logic here
        return done(null, { id: profile.id, username: `google:${profile.id}` });
      }
    )
  );

  // GitHub Strategy (similar adjustments)
  passport.use(
    new GitHubStrategy(
      {
        clientID: process.env.GITHUB_CLIENT_ID!,
        clientSecret: process.env.GITHUB_CLIENT_SECRET!,
        callbackURL: getCallbackUrl("github"),
      },
      async (accessToken, refreshToken, profile, done) => {
        console.log("GitHub auth attempt:", profile.id);
        // User creation logic here
        return done(null, { id: profile.id, username: `github:${profile.id}` });
      }
    )
  );

  passport.serializeUser((user, done) => done(null, user.id));
  passport.deserializeUser(async (id, done) => done(null, { id }));

  // Auth routes (similar to yours, adjusted for dynamic URLs)
  app.get("/api/auth/google", passport.authenticate("google", { scope: ["profile", "email"] }));
  app.get("/api/auth/google/callback", passport.authenticate("google", { failureRedirect: "/auth" }), (req, res) => res.redirect("/"));

  app.get("/api/auth/github", passport.authenticate("github", { scope: ["user:email"] }));
  app.get("/api/auth/github/callback", passport.authenticate("github", { failureRedirect: "/auth" }), (req, res) => res.redirect("/"));

  app.get("/api/health", (req, res) => {
    res.json({ authenticated: req.isAuthenticated(), user: req.user });
  });
}