### Implementation Instructions
1. **Strict Authentication Fix**
   - **Update `auth.ts`** (replace existing file):
     - Define `getCallbackUrl(provider)`: Return `https://${process.env.REPL_ID}-00-260iqc51qwukq.worf.replit.dev/api/auth/${provider}/callback` if `process.env.REPL_ID` exists, else `https://workspace.alexrichardhaye.repl.co/api/auth/${provider}/callback`. Log the chosen URL.
     - Set session settings: `secret: process.env.SESSION_SECRET || randomBytes(32).toString('hex')`, `resave: false`, `saveUninitialized: false`, `cookie: { secure: true, maxAge: 24 * 60 * 60 * 1000, sameSite: 'lax', httpOnly: true }`.
     - Configure `connect-pg-simple` with `pool`, `tableName: 'session'`, and `createTableIfMissing: true`. Log session creation success/failure.
     - Add `/api/health` endpoint: `res.json({ authenticated: req.isAuthenticated(), user: req.user, session: req.session, cookies: req.cookies })`.
     - Protect `/api/expenses` and `/api/tours` with `if (!req.isAuthenticated()) return res.sendStatus(401);`.
   - **Verify Setup**: Ensure `passport.serializeUser` and `deserializeUser` handle `{ id, username }` objects correctly.

2. **Implement OAuth SSO**
   - **Google**:
     - Use `passport-google-oauth20` with `clientID: process.env.GOOGLE_CLIENT_ID!`, `clientSecret: process.env.GOOGLE_CLIENT_SECRET!`, `callbackURL: getCallbackUrl('google')`, `proxy: true`, `scope: ["profile", "email"]`.
     - On callback, log `profile.id`, create/retrieve user with `username: google:${profile.id}`, return `{ id: profile.id, username }`.
   - **GitHub**:
     - Use `passport-github2` with `clientID: process.env.GITHUB_CLIENT_ID!`, `clientSecret: process.env.GITHUB_CLIENT_SECRET!`, `callbackURL: getCallbackUrl('github')`, `scope: ["user:email"]`.
     - On callback, log `profile.id`, create/retrieve user with `username: github:${profile.id}`, return `{ id: profile.id, username }`.
   - **Routes**:
     - `/api/auth/google`: `passport.authenticate('google')`.
     - `/api/auth/google/callback`: `passport.authenticate('google', { failureRedirect: '/auth', successRedirect: '/' })`.
     - `/api/auth/github`: `passport.authenticate('github')`.
     - `/api/auth/github/callback`: `passport.authenticate('github', { failureRedirect: '/auth', successRedirect: '/' })`.

3. **Update Frontend**
   - Create `/auth` page with buttons: "Login with Google" (`/api/auth/google`), "Login with GitHub" (`/api/auth/github`), styled (bg-orange-500, text-white, rounded, p-2, m-2).
   - Protect `/expense` and `/tours` with a server-side check: `if (!req.isAuthenticated()) return { redirect: { destination: '/auth', permanent: false } }`.

4. **Setup and Run e2e Tests with Cypress**
   - Install Cypress (`npm install --save-dev cypress`), initialize it, configure `baseUrl` to the deployed URL.
   - **Test Cases**:
     - **Google Login**: Visit `/auth`, click "Login with Google", complete OAuth (mock if needed), verify `/api/health` shows `authenticated: true`.
     - **GitHub Login**: Similar for GitHub.
     - **Protected Route**: Visit `/expense` without login, verify redirect to `/auth`.
     - **Expense Save**: Login with Google, add expense ($50, Travel, "Gas"), verify no 401.
   - Run with `npm run cypress:run`, log results, capture screenshots.

5. **Deployment**
   - Redeploy the app, ensuring Secrets load and server runs on port 5000.
   - Provide deployment URL and test results.

### Deliverables
- Fully functional `auth.ts` with OAuth SSO.
- Frontend with login and protected routes.
- Cypress e2e test setup and results.
- Deployed app with no 401/403 errors.

### Constraints
- Operate within Replit and Neon limits.
- Fix errors or log detailed diagnostics if failures occur.
- Test runtime <5 minutes.

### Execution
- Provide all code (backend, frontend, tests) with comments.
- Log every step (e.g., callback URL, session creation, auth status).
- If 401/403 persist, output full request/response details and suggest fixes.
- Deliver deployment URL and test results.
You will succeedâ€”execute now!