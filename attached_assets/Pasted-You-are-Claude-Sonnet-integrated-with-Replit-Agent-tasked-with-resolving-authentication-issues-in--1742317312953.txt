You are Claude Sonnet, integrated with Replit Agent, tasked with resolving authentication issues in the Roadbook app—a Next.js application with a PostgreSQL database hosted on Neon. The app is experiencing intermittent 401 Unauthorized errors on `/api/user` and 403 errors during OAuth SSO with Google and GitHub. Client IDs and Secrets are stored in Replit Secrets (GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET, GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET). The current `auth.ts` script (provided) uses passport.js and connect-pg-simple, but fails due to callback URL mismatches and session issues. Follow these detailed instructions to fix authentication, implement stable OAuth SSO, and add e2e tests. Deploy within Replit.

### Project Context
- **Frontend**: Next.js, deployed at `https://${process.env.REPL_ID}-00-260iqc51qwukq.worf.replit.dev`.
- **Backend**: Express server on port 5000, with PostgreSQL via Neon (tables: expenses, tours, users, session).
- **Secrets**: GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET, GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET in Replit Secrets.
- **Issue**: 401 errors on `/api/user`, 403 on OAuth callbacks, logged with session and header details.

### Implementation Instructions
1. **Fix Authentication Setup**
   - **Update `auth.ts`**:
     - Use a dynamic `callbackURL` function: `getCallbackUrl(provider)` returning `https://${process.env.REPL_ID}-00-260iqc51qwukq.worf.replit.dev/api/auth/${provider}/callback` with a fallback to `https://workspace.alexrichardhaye.repl.co/api/auth/${provider}/callback`.
     - Adjust session settings: `sameSite: 'lax'`, `secure: process.env.NODE_ENV === 'production'`, ensure `SESSION_SECRET` is set in Secrets or fallback to a random value.
     - Enhance logging: Log session data (`req.session`), cookies (`req.cookies`), and auth status on every `/api/user` request.
     - Add a `/api/health` endpoint returning `{ authenticated: req.isAuthenticated(), user: req.user }` for debugging.
   - **Middleware**: Verify `connect-pg-simple` session store works with PostgreSQL, creating the `session` table if missing.
   - **Routes**: Ensure `/api/expenses` and `/api/tours` POST requests require authentication with `req.isAuthenticated()`.

2. **Implement OAuth SSO**
   - **Google**:
     - Use `passport-google-oauth20` with scopes `["profile", "email"]`.
     - Handle callback to create or retrieve users based on `profile.id` (username: `google:${profile.id}`).
   - **GitHub**:
     - Use `passport-github2` with scope `["user:email"]`.
     - Handle callback similarly (username: `github:${profile.id}`).
   - **Redirects**: On successful auth, redirect to `/`, on failure to `/auth`.
   - **Secrets**: Fetch `GITHUB_CLIENT_ID`, `GITHUB_CLIENT_SECRET`, `GOOGLE_CLIENT_ID`, `GOOGLE_CLIENT_SECRET` from Replit Secrets.

3. **Update Frontend**
   - Add login buttons on `/auth` (e.g., "Login with Google", "Login with GitHub") linking to `/api/auth/google` and `/api/auth/github`.
   - Protect `/expense` and `/tours` routes with a redirect to `/auth` if `!req.isAuthenticated()`.

4. **Setup and Run e2e Tests with Cypress**
   - Install Cypress (`npm install --save-dev cypress`), initialize it, and configure for the deployed URL.
   - **Test Cases**:
     - **Google Login Success**: Visit `/auth`, click "Login with Google", complete OAuth, verify redirect to `/` and `/api/health` returns `authenticated: true`.
     - **GitHub Login Success**: Similar for GitHub.
     - **Protected Route**: Visit `/expense` without login, verify redirect to `/auth`.
     - **Expense Save**: Login, navigate to `/expense`, add an expense, verify no 401 error.
   - Run tests with `npm run cypress:run`, log results.

5. **Deployment**
   - Update the live Replit deployment, ensuring Secrets are loaded.
   - Provide the deployment URL and test results.

### Deliverables
- Updated `auth.ts` with fixed OAuth and session handling.
- Frontend with login buttons and protected routes.
- Cypress e2e test setup and results.
- Deployed app with stable authentication.

### Constraints
- Work within Replit and Neon limits.
- Ensure HTTPS compatibility with Replit’s proxy.
- Keep test runtime <5 minutes.

### Execution
- Provide complete code (backend, frontend, tests).
- Log errors (e.g., 401, 403) with detailed context.
- Output deployment URL and test results.
Proceed step-by-step and deliver the solution.